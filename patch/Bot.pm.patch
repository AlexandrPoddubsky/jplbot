--- Bot.pm.old	2016-01-09 19:49:41.801668822 +0300
+++ Bot.pm	2016-01-13 15:39:49.231884763 +0300
@@ -49,17 +49,18 @@
 has 'loop_sleep_time'     => (isa => PosNum, is => 'rw', default => 5);
 has 'process_timeout'     => (isa => PosNum, is => 'rw', default => 5);
 has 'from_full'           => (isa => Str, is => 'rw', default => sub{my $self = shift;
-                                                                       $self->username .
+                                                                       (defined $self->username ? $self->username : "username") .
                                                                        '@' .
-                                                                       $self->server .
+                                                                       (defined $self->server ? $self->server : "server") .
                                                                        '/' .
-                                                                       $self->alias});
+                                                                       ($self->alias ? $self->alias : "alias")});
                                                                        
 
 has 'safety_mode'            => (isa => Bool, is => 'rw', default => 1, coerce => 1);
 has 'ignore_server_messages' => (isa => Bool, is => 'rw', default => 1, coerce => 1);
 has 'ignore_self_messages'   => (isa => Bool, is => 'rw', default => 1, coerce => 1);
 has 'forums_and_responses'   => (isa => HashRef[ArrayRef[Str]], is => 'rw'); # List of forums we're in and the strings we monitor for.
+has 'forums_passwords'       => (isa => HashRef[Str], is => 'rw'); # List of forums passwords.
 has 'forum_join_time'        => (isa => HashRef[Int], is => 'rw', default => sub{{}}); # List of when we joined each forum
 has 'out_messages_per_second' => (isa => PosNum, is => 'rw', default => sub{5});
 has 'message_delay'           => (isa => PosNum, is => 'rw', default => sub {1/5});
@@ -67,6 +68,8 @@
 has 'max_message_size'        => (isa => HundredInt, is => 'rw', default => 1000000);
 has 'max_messages_per_hour'   => (isa => PosInt,     is => 'rw', default => 1000000);
 
+has 'JidDB'                   => (isa => HashRef[HashRef[Str]], is => 'rw', required => 1);
+
 # Initialize this hour's message count.
 has 'messages_sent_today'     => (isa => 'HashRef', is => 'ro', default => sub{{(localtime)[7] => {(localtime)[2] => 0}}});
 
@@ -294,6 +297,10 @@
 
 safetey: 166
 
+=item B<JidDB>
+
+Database of JIDs per forum
+
 =back
 
 =cut
@@ -422,7 +429,7 @@
     $self->Process(5);
 
     foreach my $forum (keys %{$self->forums_and_responses}) {
-        $self->JoinForum($forum);
+        $self->JoinForum($forum, $self->forums_passwords->{$forum});
     }
 
     INFO("Connected to server '" . $self->server . "' successfully");
@@ -443,12 +450,14 @@
 sub JoinForum {
     my $self = shift;
     my $forum_name = shift;
+    my $forum_pass = shift;
 
     DEBUG("Joining $forum_name on " . $self->conference_server . " as " . $self->alias);
 
     $self->jabber_client->MUCJoin(room    => $forum_name,
                                   server => $self->conference_server,
                                   nick   => $self->alias,
+                                  password => $forum_pass,
                                   );
 
     $self->forum_join_time->{$forum_name} = time;
@@ -649,21 +658,7 @@
 
     # Determine if this message was addressed to me. (groupchat only)
     my $bot_address_from;
-    my @aliases_to_respond_to = $self->get_responses($from);
-
-    if($#aliases_to_respond_to >= 0 and $type eq 'groupchat') {
-        my $request;
-        foreach my $address_type (@aliases_to_respond_to) {
-            my $qm_address_type = quotemeta($address_type);
-            next if($body !~ m/^\s*$qm_address_type\s*(\S.*)$/ms);
-            $request = $1;
-            $bot_address_from = $address_type;
-            last; # do not need to loop any more.
-        }
-        DEBUG("Message not relevant to bot");
-        return if(!defined $request);
-        $body = $request;
-    }
+    # Here was a block of code; deleted to parse messages agntostic to alias.
 
     # Call the message callback if it's defined.
     if( defined $self->message_function) {
@@ -789,6 +784,20 @@
     my $status = $presence->GetStatus();
     $status = "." if(!defined $status);
 
+    my ($forum, $nick) = split '/', $from;
+    $forum = (split '@', $forum)[0];
+
+    if($type eq 'unavailable') { # Delete disconnected user
+       if (defined ${ $self->JidDB->{$forum} }{$nick}) {
+          delete ${ $self->JidDB->{$forum} }{$nick};
+       }
+
+       return;
+    }
+
+    # "register" user on any other types
+    ${ $self->JidDB->{$forum} }{$nick} = 1;
+
     DEBUG("Presence From $from t=$type s=$status");
     DEBUG("Presence XML: " . $presence->GetXML());
 }
@@ -896,7 +905,8 @@
 Assures message size does not exceed a limit and chops it into pieces if need be.
 
 NOTE: non-printable characters (unicode included) will be stripped before sending to the server via:
-    s/[^[:print:]]+/./xmsg
+    s/\t+/ /g
+    s/[^\n\p{IsPrint}]/./g
 
 =cut
 
@@ -989,7 +999,8 @@
 
     # Strip out anything that's not a printable character
     # Now with unicode support?
-    $message_chunk =~ s/[^[:print:]]+/./xmsg; 
+    $message_chunk =~ s/\t/ /g; 
+    $message_chunk =~ s/[^\n\p{IsPrint}]/./g; 
 
     my $message_length = length($message_chunk);
     DEBUG("Sending message $yday-$hour-$messages_this_hour $message_length bytes to $recipient");
@@ -1134,6 +1145,22 @@
     $self->jabber_client->Subscription(type=>"unsubscribe", to=>$user);
     $self->jabber_client->Subscription(type=>"unsubscribed",to=>$user);
 }
+
+=item B<IsInRoom>
+
+Returns 1 or 0 if nick is present at specified forum
+
+=cut
+
+sub IsInRoom {
+    my $self = shift;
+    my $forum = shift;
+    my $nick = shift;
+
+    return 0 if(!defined $forum || !defined $nick);
+
+    return ${ $self->JidDB->{$forum} }{$nick} || 0;
+}
 =back
 
 =head1 AUTHOR
