--- Bot.pm.old	2016-01-09 19:49:41.801668822 +0300
+++ Bot.pm	2016-04-03 22:20:39.646638757 +0300
@@ -12,7 +12,11 @@
 use Time::HiRes;
 use Sys::Hostname;
 use Log::Log4perl qw(:easy);
-#use Data::Dumper; #For testing only.
+#use Data::Dumper; #For @ret;
+
+
+my $watchdog_default = 8; # Reconnect loop maximum value before exit
+my $watchdog = $watchdog_default; # Reconnect loop limit
 
 
 coerce Bool, from Str, 
@@ -49,17 +53,18 @@
 has 'loop_sleep_time'     => (isa => PosNum, is => 'rw', default => 5);
 has 'process_timeout'     => (isa => PosNum, is => 'rw', default => 5);
 has 'from_full'           => (isa => Str, is => 'rw', default => sub{my $self = shift;
-                                                                       $self->username .
+                                                                       (defined $self->username ? $self->username : "username") .
                                                                        '@' .
-                                                                       $self->server .
+                                                                       (defined $self->server ? $self->server : "server") .
                                                                        '/' .
-                                                                       $self->alias});
+                                                                       ($self->alias ? $self->alias : "alias")});
                                                                        
 
 has 'safety_mode'            => (isa => Bool, is => 'rw', default => 1, coerce => 1);
 has 'ignore_server_messages' => (isa => Bool, is => 'rw', default => 1, coerce => 1);
 has 'ignore_self_messages'   => (isa => Bool, is => 'rw', default => 1, coerce => 1);
 has 'forums_and_responses'   => (isa => HashRef[ArrayRef[Str]], is => 'rw'); # List of forums we're in and the strings we monitor for.
+has 'forums_passwords'       => (isa => HashRef[Str], is => 'rw'); # List of forums passwords.
 has 'forum_join_time'        => (isa => HashRef[Int], is => 'rw', default => sub{{}}); # List of when we joined each forum
 has 'out_messages_per_second' => (isa => PosNum, is => 'rw', default => sub{5});
 has 'message_delay'           => (isa => PosNum, is => 'rw', default => sub {1/5});
@@ -67,6 +72,11 @@
 has 'max_message_size'        => (isa => HundredInt, is => 'rw', default => 1000000);
 has 'max_messages_per_hour'   => (isa => PosInt,     is => 'rw', default => 1000000);
 
+has 'JidDB'                   => (isa => HashRef[HashRef[Str]], is => 'rw', required => 1);
+has 'SayToDB'                 => (isa => HashRef[HashRef[HashRef[HashRef[Str]]]], is => 'rw', required => 1);
+has 'SayTo'                   => (isa => Maybe[CodeRef], is => 'rw', default => sub{undef});
+has 'shutdown'                   => (isa => Maybe[CodeRef], is => 'rw', default => sub{return});
+
 # Initialize this hour's message count.
 has 'messages_sent_today'     => (isa => 'HashRef', is => 'ro', default => sub{{(localtime)[7] => {(localtime)[2] => 0}}});
 
@@ -294,6 +304,18 @@
 
 safetey: 166
 
+=item B<JidDB>
+
+Database of JIDs per forum
+
+=item B<SayToDB>
+
+Database of sayto messages per forum
+
+=item B<SayTo>
+
+Function which reacts on presence
+
 =back
 
 =cut
@@ -422,7 +444,7 @@
     $self->Process(5);
 
     foreach my $forum (keys %{$self->forums_and_responses}) {
-        $self->JoinForum($forum);
+        $self->JoinForum($forum, $self->forums_passwords->{$forum});
     }
 
     INFO("Connected to server '" . $self->server . "' successfully");
@@ -443,12 +465,14 @@
 sub JoinForum {
     my $self = shift;
     my $forum_name = shift;
+    my $forum_pass = shift;
 
     DEBUG("Joining $forum_name on " . $self->conference_server . " as " . $self->alias);
 
     $self->jabber_client->MUCJoin(room    => $forum_name,
                                   server => $self->conference_server,
                                   nick   => $self->alias,
+                                  password => $forum_pass,
                                   );
 
     $self->forum_join_time->{$forum_name} = time;
@@ -497,12 +521,14 @@
     my $last_background = time - $time_between_background_routines - 1; # Call background process every so often...
     my $counter = 0; # Keep track of how many times we've looped. Not sure if we'll use this long term.
 
-    while(1) { # Loop for ever!
+    while($watchdog > 0) { # Loop for ever!^W^W until limit
         # Process and re-connect if you have to.
         my $reconnect_timeout = 1;
         eval {$self->Process($process_timeout)};
 
         if($@) { #Assume the connection is down...
+            $watchdog--; # Decrement watchdog counter
+
             my $message = "Disconnected from " . $self->server . ":" . $self->port
                         . " as " . $self->username;
             ERROR("$message Reconnecting...");
@@ -517,6 +543,8 @@
         }
         Time::HiRes::sleep $message_delay;
     }
+
+    &{ $self->shutdown }(); # Here we can save data before actual shutdown in case of $watchdog exceeded
 }
 
 =item B<ReconnectToServer>
@@ -649,24 +677,12 @@
 
     # Determine if this message was addressed to me. (groupchat only)
     my $bot_address_from;
-    my @aliases_to_respond_to = $self->get_responses($from);
-
-    if($#aliases_to_respond_to >= 0 and $type eq 'groupchat') {
-        my $request;
-        foreach my $address_type (@aliases_to_respond_to) {
-            my $qm_address_type = quotemeta($address_type);
-            next if($body !~ m/^\s*$qm_address_type\s*(\S.*)$/ms);
-            $request = $1;
-            $bot_address_from = $address_type;
-            last; # do not need to loop any more.
-        }
-        DEBUG("Message not relevant to bot");
-        return if(!defined $request);
-        $body = $request;
-    }
+    # Here was a block of code; deleted to parse messages agntostic to alias.
 
     # Call the message callback if it's defined.
     if( defined $self->message_function) {
+        $watchdog = $watchdog_default; # Reset watchdog on every new message
+        
         $self->message_function->(bot_object => $self,
                                   from_full => $from_full,
                                   body => $body,
@@ -786,9 +802,37 @@
     my $from = $presence->GetFrom();
     $from = "." if(!defined $from);
 
+    # get real JID from XML behind of GetChild()
+    $presence->GetXML() =~ m{jid='([^']+)'};
+    my $real_jid = (split '/', $1 // $from)[0];
+
     my $status = $presence->GetStatus();
     $status = "." if(!defined $status);
 
+    my ($forum, $nick) = split '/', $from;
+    $forum = (split '@', $forum)[0];
+
+    if($type eq 'unavailable') { # Delete disconnected user
+       if(defined $self->JidDB->{$forum}->{$nick}) {
+          delete $self->JidDB->{$forum}->{$nick};
+       }
+
+       if(defined $self->JidDB->{"jid_$forum"}->{$nick}) {
+          delete $self->JidDB->{"jid_$forum"}->{$nick};
+       }
+
+       return;
+    }
+
+    # "register" user on any other types
+    $self->JidDB->{$forum}->{$nick} = 1;
+    $self->JidDB->{"jid_$forum"}->{$nick} = $real_jid;
+
+    # call SayTo subroutine if needed
+    if(defined $self->SayToDB->{$forum}->{lc($nick)}) {
+       &{ $self->SayTo }($self, $forum, $nick);
+    }
+
     DEBUG("Presence From $from t=$type s=$status");
     DEBUG("Presence XML: " . $presence->GetXML());
 }
@@ -896,7 +940,8 @@
 Assures message size does not exceed a limit and chops it into pieces if need be.
 
 NOTE: non-printable characters (unicode included) will be stripped before sending to the server via:
-    s/[^[:print:]]+/./xmsg
+    s/\t+/ /g
+    s/[^\n\p{IsPrint}]/./g
 
 =cut
 
@@ -989,7 +1034,8 @@
 
     # Strip out anything that's not a printable character
     # Now with unicode support?
-    $message_chunk =~ s/[^[:print:]]+/./xmsg; 
+    $message_chunk =~ s/\t/ /g; 
+    $message_chunk =~ s/[^\n\p{IsPrint}]/./g; 
 
     my $message_length = length($message_chunk);
     DEBUG("Sending message $yday-$hour-$messages_this_hour $message_length bytes to $recipient");
@@ -1134,6 +1180,45 @@
     $self->jabber_client->Subscription(type=>"unsubscribe", to=>$user);
     $self->jabber_client->Subscription(type=>"unsubscribed",to=>$user);
 }
+
+=item B<IsInRoomJid>
+
+Returns grep if JID is present at specified forum
+
+=cut
+
+sub IsInRoomJid {
+    my $self = shift;
+    my $forum = shift;
+    my $jid = shift;
+    my $qnick = quotemeta($jid);
+
+    return 0 if(
+       !defined $forum || !defined $jid || !defined $self->JidDB->{"jid_$forum"}
+    );
+
+    my @ret = grep {/^$qnick$/i} values $self->JidDB->{"jid_$forum"};
+    return @ret;
+}
+=item B<IsInRoom>
+
+Returns grep if nick is present at specified forum
+
+=cut
+
+sub IsInRoom {
+    my $self = shift;
+    my $forum = shift;
+    my $nick = shift;
+    my $qnick = quotemeta($nick);
+
+    return 0 if(
+       !defined $forum || !defined $nick || !defined $self->JidDB->{$forum}
+    );
+
+    my @ret = grep {/^$qnick$/i} keys $self->JidDB->{$forum};
+    return @ret;
+}
 =back
 
 =head1 AUTHOR
